//
// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

@import "../animation/variables";
@import "../ripple/mixins";
@import "../rtl/mixins";
@import "../theme/variables";
@import "../theme/mixins";
@import "../typography/mixins";
@import "../typography/variables";

$textfield-error-on-light: #d50000;
$textfield-error-on-dark: #ff6e6e;
$textfield-divider-on-light: rgba(black, .12);
$textfield-divider-on-dark: rgba(white, .12);
$textfield-disabled-border-on-light: rgba(#231f20, .26);
$textfield-disabled-border-on-dark: rgba(white, .3);

@function textfield-transition($property) {
  @return #{$property} 180ms $animation-standard-curve-timing-function;
}

// postcss-bem-linter: define textfield
.textfield {
  display: inline-block;
  margin-bottom: 8px;
  will-change: opacity, transform, color;

  &-input {
    @include theme-prop(color, text-primary-on-light);
    @include typography-base;
    // We use only a subset of the MDC typography values here as changing things such as line-height
    // affects how the labels are transformed.
    @each $prop in (font-size, letter-spacing) {
      #{$prop}: map-get(map-get($typo-styles, subheading2), $prop);
    }

    width: 100%;
    padding: 0 0 8px;
    border: none;
    background: none;
    font-size: inherit;
    appearance: none;

    &::placeholder {
      @include theme-prop(color, text-hint-on-light);

      transition: textfield-transition(color);
      opacity: 1;
    }

    &:focus {
      outline: none;

      &::placeholder {
        @include theme-prop(color, text-secondary-on-light);
      }
    }

    // Remove red outline on firefox
    &:invalid {
      box-shadow: none;
    }

    @include theme-dark {
      @include theme-prop(color, text-primary-on-dark);

      &::placeholder {
        @include theme-prop(color, text-hint-on-dark);
      }

      &:focus::placeholder {
        @include theme-prop(color, text-secondary-on-dark);
      }
    }
  }

  &-label {
    @include theme-prop(color, text-hint-on-light);

    position: absolute;
    bottom: 8px;
    left: 0;
    transform-origin: left top;
    transition: textfield-transition(transform), textfield-transition(color);
    cursor: text;

    // stylelint-disable plugin/selector-bem-pattern
    @include rtl(".textfield") {
      right: 0;
      left: auto;
      transform-origin: right top;
    }
    // stylelint-enable plugin/selector-bem-pattern

    @include theme-dark(".textfield") {
      @include theme-prop(color, text-hint-on-dark);
    }

    &-float-above {
      transform: translateY(-100%) scale(.75, .75);
      cursor: auto;
    }
  }
}

// Move label when textfield gets autofilled in Chrome
.textfield-input {
  // stylelint-disable plugin/selector-bem-pattern
  &:-webkit-autofill + .textfield-label {
    transform: translateY(-100%) scale(.75, .75);
    cursor: auto;
  }
  // stylelint-enable plugin/selector-bem-pattern
}

.textfield-box {
  display: inline-flex;
  position: relative;
  height: 56px;
  border-radius: 4px 4px 0 0;
  background-color: rgba(black, .04);
  overflow: hidden;

  @include theme-dark(".textfield", true) {
    background-color: rgba(white, .1);
  }

  &::before,
  &::after {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: inherit;
    opacity: 0;
    pointer-events: none;
    content: "";
  }

  // NOTE: For some reasons, stylelint complains that the two patterns below don't follow BEM.
  // However, it seems to emit the wrong selector for that pattern. Thus, we disable it above where
  // we would normally disable it (&.textfield-disabled) as a workaround.

  // stylelint-disable plugin/selector-bem-pattern
  // TODO: Refactor this out once #194 lands
  $opacity-duration: 83ms;

  &::before {
    transition: opacity 17ms linear, transform 0ms $opacity-duration+2 linear;
  }

  &:hover {
    &::before {
      transition:
        opacity $opacity-duration linear 17ms,
        transform 250ms $animation-deceleration-curve-timing-function 17ms;
      opacity: 1;
    }
  }

  .textfield-input {
    align-self: flex-end;
    box-sizing: border-box;
    height: 100%;
    padding: 20px 16px 0;
  }

  .textfield-label {
    @include rtl-reflexive-position(left, 16px);

    position: absolute;
    bottom: 20px;
    color: rgba(black, .6);
    pointer-events: none;
    // Force the label into its own layer to prevent to prevent visible layer promotion adjustments
    // when the ripple is activated behind it.
    will-change: transform;

    @include theme-dark(".textfield") {
      @include theme-prop(color, text-secondary-on-dark);
    }

    &-float-above {
      transform: translateY(-50%) scale(.75, .75);
    }
  }

  &.ripple-upgraded {
    @include ripple-base;
    // TODO: Add ::before as ripple bg once #194 lands
    @include ripple-fg((pseudo: "::after", opacity: .04));

    &::before {
      top: calc(50% - var(--ripple-fg-size, 100%) / 2);
      left: calc(50% - var(--ripple-fg-size, 100%) / 2);
      width: var(--ripple-fg-size, 100%);
      height: var(--ripple-fg-size, 100%);
      transform: scale(.8);
    }

    &:hover::before {
      transform: scale(calc(var(--ripple-fg-scale, 1) + .1));
    }

    @include theme-dark(".textfield", true) {
      @include ripple-fg((pseudo: "::after", base-color: white, opacity: .05));
    }
  }

  &.textfield-disabled {
    border-bottom: none;
    background-color: rgba(black, .02);
    color: rgba(black, .38);

    @include theme-dark(".textfield", true) {
      border-bottom: none;
      background-color: rgba(white, .05);
    }

    .textfield-label {
      bottom: 20px;
    }

    .textfield-input {
      padding-bottom: 0;
    }
  }

  // TODO: Move into general .textfield decl and replace ::after textfield styles with this
  // element as part of #675
  .textfield-bottom-line {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    transform: scaleY(1);
    transform-origin: center bottom;
    transition:
      background-color 33ms $animation-standard-curve-timing-function,
      textfield-transition(transform);
    background-color: rgba(black, .42);
    pointer-events: none;

    &::after {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      transition: textfield-transition(opacity);
      background-color: $textfield-error-on-light;
      opacity: 0;
      content: "";
    }

    @include theme-dark(".textfield") {
      @include theme-prop(background-color, text-hint-on-dark);

      &::after {
        background-color: $textfield-error-on-dark;
      }
    }
  }

  &.textfield-focused .textfield-bottom-line {
    @include theme-prop(background-color, primary);

    transform: scaleY(2);
  }

  &.textfield-disabled .textfield-bottom-line {
    display: none;
  }

  &.textfield-invalid .textfield-bottom-line::after {
    opacity: 1;
  }

  &.textfield-dense {
    height: 44px;

    .textfield-input {
      padding: 12px 12px 0;
    }

    .textfield-label {
      @include rtl-reflexive-position(left, 12px);

      bottom: 12px;

      &-float-above {
        transform: translateY(calc(-75% - 2px)) scale(.923, .923);
      }
    }
  }
  // stylelint-enable plugin/selector-bem-pattern
}

.textfield-upgraded:not(.textfield-fullwidth):not(.textfield-box) {
  display: inline-flex;
  position: relative;
  align-items: flex-end;
  box-sizing: border-box;
  margin-top: 16px;

  &:not(.textfield-multiline) {
    height: 48px;

    &::after {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 1px;
      transform: translateY(50%) scaleY(1);
      transform-origin: center bottom;
      transition: textfield-transition(background-color), textfield-transition(transform);
      background-color: $textfield-divider-on-light;
      content: "";

      @include theme-dark(".textfield") {
        background-color: $textfield-divider-on-dark;
      }
    }
  }

  .textfield-label {
    pointer-events: none;
  }
}

.textfield-focused {
  @mixin textfield-after-styles {
    @include theme-prop(background-color, primary);

    transform: translateY(100%) scaleY(2);
    transition: textfield-transition(transform);
  }

  @mixin textfield-label-styles {
    @include theme-prop(color, primary);
  }

  &.textfield-upgraded:not(.textfield-fullwidth):not(.textfield-multiline):not(.textfield-box)::after {
    @include textfield-after-styles;

    @include theme-dark(".textfield", true) {
      @include textfield-after-styles;
    }
  }

  .textfield-label {
    @include textfield-label-styles;

    @include theme-dark(".textfield") {
      @include textfield-label-styles;
    }
  }
}

.textfield-dense {
  margin-top: 12px;
  margin-bottom: 4px;
  font-size: .813rem;

  .textfield-label-float-above {
    // NOTE: This is an eyeball'd approximation of what's in the mocks.
    transform: translateY(calc(-100% - 2px)) scale(.923, .923);
  }
}

.textfield-invalid {
  &:not(.textfield-focused):not(.textfield-box) {
    &::after,
    &.textfield-upgraded::after {
      background-color: $textfield-error-on-light;
    }

    .textfield-label {
      color: $textfield-error-on-light;
    }
  }

  @include theme-dark(".textfield", true) {
    &:not(.textfield-focused) {
      &::after,
      &.textfield-upgraded::after {
        background-color: $textfield-error-on-dark;
      }

      .textfield-label {
        color: $textfield-error-on-dark;
      }
    }
  }
}

.textfield-disabled {
  border-bottom: 1px dotted $textfield-disabled-border-on-light;
  pointer-events: none;

  &::after {
    display: none;
  }

  // Account for offset by border
  .textfield-input {
    padding-bottom: 7px;
  }

  @include theme-dark(".textfield", true) {
    border-bottom: 1px dotted $textfield-disabled-border-on-dark;
  }

  // stylelint-disable plugin/selector-bem-pattern
  .textfield-input,
  .textfield-label,
  + .textfield-helptext {
    @include theme-prop(color, text-disabled-on-light);
  }
  // stylelint-enable plugin/selector-bem-pattern

  .textfield-input,
  .textfield-label {
    @include theme-dark(".textfield") {
      @include theme-prop(color, text-disabled-on-dark);
    }
  }

  @include theme-dark(".textfield", true) {
    // stylelint-disable plugin/selector-bem-pattern
    + .textfield-helptext {
      @include theme-prop(color, text-disabled-on-dark);
    }
    // stylelint-enable plugin/selector-bem-pattern
  }

  .textfield-label {
    bottom: 7px;
    cursor: default;
  }
}

.textfield-input:required + .textfield-label::after {
  margin-left: 1px;
  content: "*";

  .textfield-focused & {
    color: $textfield-error-on-light;

    @include theme-dark(".textfield", true) {
      color: $textfield-error-on-dark;
    }
  }
}

.textfield-multiline {
  $padding-inset: 4px;
  $label-offset-y: $padding-inset + 2;
  $label-offset-x: $padding-inset;

  display: flex;
  height: initial;
  transition: none;

  &::after {
    content: initial;
  }

  // stylelint-disable plugin/selector-bem-pattern

  .textfield-input {
    padding: $padding-inset;
    transition: textfield-transition(border-color);
    border: 1px solid $textfield-divider-on-light;
    border-radius: 2px;

    @include theme-dark(".textfield") {
      border-color: $textfield-divider-on-dark;
    }

    &:focus {
      @include theme-prop(border-color, primary);
    }

    &:invalid:not(:focus) {
      border-color: $textfield-error-on-light;
    }

    @include theme-dark(".textfield") {
      &:invalid:not(:focus) {
        border-color: $textfield-error-on-dark;
      }
    }
  }

  .textfield-label {
    top: $label-offset-y;
    bottom: initial;
    left: $label-offset-x;

    @include rtl(".textfield-multiline") {
      right: $label-offset-x;
      left: auto;
    }

    &-float-above {
      // Translate above the top of the input, and compensate for the amount of offset needed
      // to position the label within the bounds of the inset padding.
      // Note that the scale factor is an eyeball'd approximation of what's shown in the mocks.
      transform: translateY(calc(-100% - #{$label-offset-y})) scale(.923, .923);
    }
  }

  &.textfield-disabled {
    border-bottom: none;

    .textfield-input {
      border: 1px dotted $textfield-disabled-border-on-light;

      @include theme-dark(".textfield") {
        border-color: $textfield-disabled-border-on-dark;
      }
    }
  }
  // stylelint-enable plugin/selector-bem-pattern
}

.textfield-fullwidth {
  display: block;
  box-sizing: border-box;
  width: 100%;
  margin: 0;
  border: none;
  border-bottom: 1px solid $textfield-divider-on-light;
  outline: none;

  // stylelint-disable plugin/selector-bem-pattern

  &:not(.textfield-multiline) {
    height: 56px;
  }

  &.textfield-multiline {
    padding: 20px 0 0;
  }

  &.textfield-dense {
    &:not(.textfield-multiline) {
      height: 48px;
    }

    &.textfield-multiline {
      padding: 16px 0 0;
    }
  }

  &.textfield-disabled {
    &,
    &.textfield-multiline {
      border-bottom: 1px dotted $textfield-divider-on-light;
    }
  }

  @include theme-dark {
    border-bottom: 1px solid $textfield-divider-on-dark;

    &.textfield-disabled {
      &,
      &.textfield-multiline {
        border-bottom: 1px dotted $textfield-divider-on-dark;
      }
    }
  }

  // stylelint-enable plugin/selector-bem-pattern

  .textfield-input {
    width: 100%;
    height: 100%;
    padding: 0;
    resize: none;
    // Use !important here to override all other border treatments
    border: none !important;
  }
}

// Graceful degredation for css-only inputs

.textfield {
  &:not(.textfield-upgraded):not(.textfield-multiline) .textfield-input {
    transition: textfield-transition(border-bottom-color);
    border-bottom: 1px solid $textfield-divider-on-light;
  }

  &:not(.textfield-upgraded) .textfield-input {
    &:focus {
      @include theme-prop(border-color, primary);
    }

    &:disabled {
      @include theme-prop(color, text-disabled-on-light);

      border-style: dotted;
      border-color: $textfield-disabled-border-on-light;
    }

    &:invalid:not(:focus) {
      border-color: $textfield-error-on-light;
    }
  }

  @include theme-dark {
    &:not(.textfield-upgraded) .textfield-input {
      &:not(:focus) {
        border-color: rgba(white, .12);
      }

      &:disabled {
        @include theme-prop(color, text-disabled-on-dark);

        border-color: $textfield-disabled-border-on-dark;
      }

      &:invalid:not(:focus) {
        border-color: $textfield-error-on-dark;
      }
    }
  }
}

.textfield-box:not(.textfield-upgraded) {
  height: 36px;

  &::before,
  &::after {
    border-radius: 0;
  }

  .textfield-input {
    padding-top: 0;
  }
}

// postcss-bem-linter: end

// postcss-bem-linter: define textfield-helptext

.textfield-helptext {
  @include theme-prop(color, text-hint-on-light);

  margin: 0;
  transition: textfield-transition(opacity);
  opacity: 0;
  font-size: .75rem;
  will-change: opacity;

  @include theme-dark {
    @include theme-prop(color, text-hint-on-dark);
  }

  // stylelint-disable plugin/selector-bem-pattern
  .textfield + & {
    margin-bottom: 8px;
  }

  .textfield-dense + & {
    margin-bottom: 4px;
  }

  .textfield-focused + &:not(#{&}-validation-msg) {
    opacity: 1;
  }

  .textfield-box + & {
    margin-right: 16px;
    margin-left: 16px;
  }

  // stylelint-enable plugin/selector-bem-pattern
}

.textfield-helptext-persistent {
  transition: none;
  opacity: 1;
  will-change: initial;
}

// postcss-bem-linter: end

.textfield-invalid {
  + .textfield-helptext-validation-msg {
    opacity: 1;
    color: $textfield-error-on-light;
  }

  @include theme-dark(".textfield", true) {
    + .textfield-helptext-validation-msg {
      color: $textfield-error-on-dark;
    }
  }
}

// form-field tweaks to align text field label correctly
// stylelint-disable selector-max-type
.form-field > .textfield + label {
  align-self: flex-start;
}
// stylelint-enable selector-max-type
