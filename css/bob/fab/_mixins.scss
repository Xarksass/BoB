// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@import "../animation/functions";
@import "../elevation/mixins";
@import "../elevation/variables";
@import "../ripple/mixins";
@import "../theme/functions";
@import "../theme/mixins";
@import "./variables";

@mixin fab-accessible($container-color) {
  @include fab-container-color($container-color);
  // Calculate whether to use dark or light text on top of given color.
  $light-or-dark-text: theme-light-or-dark($container-color);

  @if ($light-or-dark-text == "light") {
    @include fab-ink-color(text-primary-on-dark);
    @include fab-ripple($fab-light-ripple-config);
  } @else {
    @include fab-ink-color(text-primary-on-light);
    @include fab-ripple(()); //default dark ripple
  }
}

@mixin fab-container-color($color) {
  @include theme-prop(background-color, $color);
}

@mixin fab-ink-color($color) {
  @include theme-prop(color, $color);
}

@mixin fab-ripple($ripple-config) {
  @include ripple-bg(map-merge((pseudo: "::before"), $ripple-config));
  @include ripple-fg(map-merge((pseudo: "::after"), $ripple-config));
}

$fab-icon-enter-delay_: 90ms;
$fab-icon-enter-duration_: 180ms;

@mixin fab-base_ {
  @include ripple-base;
  @include elevation(6);

  display: inline-flex;
  position: relative;
  justify-content: center;
  box-sizing: border-box;
  width: 56px;
  height: 56px;
  padding: 0;
  transition:
    box-shadow $elevation-transition-duration $elevation-transition-timing-function,
    opacity 15ms linear 30ms,
    animation-enter(transform, $fab-icon-enter-duration_ + $fab-icon-enter-delay_);
  border: none;
  border-radius: 50%;
  fill: currentColor;
  cursor: pointer;
  user-select: none;
  -moz-appearance: none;
  -webkit-appearance: none;
  overflow: hidden;

  &:active {
    @include elevation(12);
  }

  &:active,
  &:focus {
    // TODO(acdvorak): Should this be paired with states and/or ripple? We don't want to disable outline
    // (an accessibility/usability feature) unless we're confident that there is also a visual indication that the
    // element has focus. If the client has customized the DOM in some unexpected way, and is certain that another
    // element will receive focus instead, they can always override this property manually in their CSS.
    outline: none;
  }

  &:hover {
    cursor: pointer;
  }

  &::-moz-focus-inner {
    padding: 0;
    border: 0;
  }

  // This allows for using SVGs within them to align properly in all browsers.
  // Can remove once: https://bugzilla.mozilla.org/show_bug.cgi?id=1294515 is resolved.

  // stylelint-disable selector-max-type
  // postcss-bem-linter: ignore
  > svg {
    width: 100%;
  }
  // stylelint-enable selector-max-type
}

@mixin fab-mini_ {
  width: 40px;
  height: 40px;
}

@mixin fab-icon_ {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  transition: animation-enter(transform, $fab-icon-enter-duration_, $fab-icon-enter-delay_);
  will-change: transform;
}

@mixin fab-exited_ {
  transform: scale(0);
  transition:
    opacity 15ms linear 150ms,
    animation-exit-permanent(transform, 180ms);
  opacity: 0;

  .fab-icon {
    transform: scale(0);
    transition: animation-exit-permanent(transform, 135ms);
  }
}
